generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id           Int           @id @default(autoincrement())
  title        String
  content      String?
  description  String?
  published    Boolean       @default(false)
  author       User?         @relation(fields: [authorId], references: [id])
  authorId     String?
  likes        Like[]
  comments     Comment[]
  codeLanguage CodeLanguage?
  tags         TagsOnPosts[]
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  updatedAt    DateTime      @default(now()) @map(name: "updated_at")
  activity     Activity[]
}

model User {
  id               String     @unique @default(uuid())
  firstName        String?
  lastName         String?
  name             String?
  email            String     @unique
  userName         String?    @unique @default(uuid())
  image            String?
  createdAt        DateTime   @default(now()) @map(name: "created_at")
  updatedAt        DateTime   @updatedAt @map(name: "updated_at")
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  following        Follow[]   @relation("follower")
  followers        Follow[]   @relation("following")
  authoredActivity Activity[] @relation("author")
  ownedActivity    Activity[] @relation("owner")

  @@map(name: "users")
}

model Comment {
  id        Int        @id @default(autoincrement())
  post      Post       @relation(fields: [postId], references: [id])
  postId    Int
  content   String
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @default(now()) @map(name: "updated_at")
  author    User?      @relation(fields: [authorId], references: [id])
  authorId  String?
  Activity  Activity[]
}

model Like {
  id        Int        @id @default(autoincrement())
  post      Post       @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @default(now()) @map(name: "updated_at")
  author    User?      @relation(fields: [authorId], references: [id])
  authorId  String?
  activity  Activity[]
}

model Follow {
  follower    User       @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User       @relation("following", fields: [followingId], references: [id])
  followingId String
  activity    Activity[]

  @@id([followerId, followingId])
}

model Activity {
  id                Int      @id @default(autoincrement())
  unread            Boolean  @default(true)
  post              Post?    @relation(fields: [postId], references: [id])
  postId            Int?
  like              Like?    @relation(fields: [likeId], references: [id])
  likeId            Int?
  follow            Follow?  @relation(fields: [followFollowerId, followFollowingId], references: [followerId, followingId])
  followId          Int?
  comment           Comment? @relation(fields: [commentId], references: [id])
  commentId         Int?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  author            User     @relation(name: "author", fields: [authorId], references: [id])
  authorId          String
  owner             User     @relation(name: "owner", fields: [ownerId], references: [id])
  ownerId           String
  followFollowerId  String?
  followFollowingId String?
}

model Tag {
  id        Int           @id @default(autoincrement())
  name      String
  createdAt DateTime      @default(now()) @map(name: "created_at")
  updatedAt DateTime      @default(now()) @map(name: "updated_at")
  posts     TagsOnPosts[]
}

model TagsOnPosts {
  post   Post @relation(fields: [postId], references: [id])
  postId Int
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  Int

  @@id([postId, tagId])
}

enum CodeLanguage {
  JAVASCRIPT
  TYPESCRIPT
}
